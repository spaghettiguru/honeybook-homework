{"version":3,"sources":["logo.svg","components/Contact/Contact.js","components/ContactList/ContactList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Contact","props","react_default","a","createElement","className","src","pictureURL","alt","companyLogoURL","name","jobTitle","companyName","phoneNumber","href","email","target","rel","displayName","defaultProps","logo","ContactList","contactsToShow","filterText","toLowerCase","contacts","filter","contact","job","company_name","phone","includes","length","map","key","Contact_Contact","profile_image","icon","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","networkErrorOccured","onFilterChanged","bind","assertThisInitialized","fetch","then","response","json","setState","type","placeholder","value","onChange","ContactList_ContactList","e","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kFAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,6TCIjC,SAASC,EAAQC,GACpB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAAkBC,IAAKL,EAAMM,WAAYC,IAAI,YAC5DN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBAAuBC,IAAKL,EAAMQ,eAAgBD,IAAI,oCACrEN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAgBJ,EAAMS,MACrCR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBAAqBJ,EAAMU,SAA1C,OAAwDV,EAAMW,aAC9DV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAAf,iBAA8CJ,EAAMY,aACpDX,EAAAC,EAAAC,cAAA,KAAGU,KAAM,YAAcb,EAAMc,MAAOC,OAAO,SAASC,IAAI,sBAAsBZ,UAAU,iBAAiBJ,EAAMc,SAM/Hf,EAAQkB,YAAc,UACtBlB,EAAQmB,aAAe,CACnBZ,WAAY,4EACZE,eAAgBW,WClBb,SAASC,EAAYpB,GACxB,IAAIqB,EACEC,EAAatB,EAAMsB,WAAWC,cAkBpC,OAfIF,EADAC,EACiBtB,EAAMwB,SAASC,OAAO,SAAAC,GAAW,IACvCjB,EAAyCiB,EAAzCjB,KAAMkB,EAAmCD,EAAnCC,IAAKC,EAA8BF,EAA9BE,aAAcC,EAAgBH,EAAhBG,MAAOf,EAASY,EAATZ,MAQvC,OANsBL,EAAKc,cAAcO,SAASR,IAC9CK,EAAIJ,cAAcO,SAASR,IAC3BM,EAAaL,cAAcO,SAASR,IACpCO,EAAMN,cAAcO,SAASR,IAC7BR,EAAMS,cAAcO,SAASR,KAKpBtB,EAAMwB,SAGvBF,IAAeD,EAAeU,OAE1B9B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BAAf,2FAOJH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gBAENiB,EAAeW,IACX,SAAAN,GAAO,OACPzB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,oBAAoB6B,IAAKP,EAAQZ,OAC3Cb,EAAAC,EAAAC,cAAC+B,EAAD,CACIzB,KAAMiB,EAAQjB,KACdC,SAAUgB,EAAQC,IAClBhB,YAAae,EAAQE,aACrBtB,WAAYoB,EAAQS,cACpB3B,eAAgBkB,EAAQU,KACxBxB,YAAac,EAAQG,MACrBf,MAAOY,EAAQZ,sBCc5BuB,cAnDb,SAAAA,EAAYrC,GAAO,IAAAsC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMzC,KAED6C,MAAQ,CACXrB,SAAU,KACVF,WAAY,GACZwB,qBAAqB,GAGvBR,EAAKS,gBAAkBT,EAAKS,gBAAgBC,KAArBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KATNA,0NAcQY,MAjBJ,iDAiB4BC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,gBAAnE7B,SACNiB,KAAKa,SAAS,CAAC9B,6DAEfiB,KAAKa,SAAS,CAACR,qBAAqB,gJAKtC,OACE7C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAd,gBACAH,EAAAC,EAAAC,cAAA,SACEoD,KAAK,OACLnD,UAAU,eACVoD,YAAY,YACZC,MAAOhB,KAAKI,MAAMvB,WAClBoC,SAAUjB,KAAKM,mBAEnB9C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACZqC,KAAKI,MAAMrB,UAAYvB,EAAAC,EAAAC,cAACwD,EAAD,CAAanC,SAAUiB,KAAKI,MAAMrB,SAAUF,WAAYmB,KAAKI,MAAMvB,cACzFmB,KAAKI,MAAMrB,WAAaiB,KAAKI,MAAMC,qBACnC7C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAf,uBACDqC,KAAKI,MAAMC,qBACV7C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAAf,+GAMMwD,GACdnB,KAAKa,SAAS,CACZhC,WAAYsC,EAAE7C,OAAO0C,eA/CTI,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnE,EAAAC,EAAAC,cAACkE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,KAAK,SAAAwB,GACjCA,EAAaC","file":"static/js/main.76d3aa16.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from '../../logo.svg';\nimport './Contact.scss';\n\nexport function Contact(props) {\n    return (\n        <div className=\"contact\">\n            <img className=\"contact-picture\" src={props.pictureURL} alt=\"Contact\" />\n            <div className=\"contact-details\">\n                <img className=\"contact-company-logo\" src={props.companyLogoURL} alt=\"Contact's employer company logo\" />\n                <div className=\"contact-name\">{props.name}</div>\n                <div className=\"contact-work-info\">{props.jobTitle} | @{props.companyName}</div>\n                <div className=\"contact-phone\">Phone Number: {props.phoneNumber}</div>\n                <a href={'mailto://' + props.email} target=\"_blank\" rel=\"noopener noreferrer\" className=\"contact-email\">{props.email}</a>\n            </div>\n        </div>\n    )\n}\n\nContact.displayName = \"Contact\";\nContact.defaultProps = {\n    pictureURL: 'https://www.gravatar.com/avatar/00000000000000000000000000000000?d=mp&f=y',\n    companyLogoURL: logo\n};","import React from 'react';\nimport {Contact} from '../Contact/Contact';\nimport './ContactList.scss';\n\nexport function ContactList(props) {\n    let contactsToShow;\n    const filterText = props.filterText.toLowerCase();\n\n    if (filterText) {\n        contactsToShow = props.contacts.filter(contact => {\n            const {name, job, company_name, phone, email} = contact;\n\n            const matchesFilter = name.toLowerCase().includes(filterText) ||\n                job.toLowerCase().includes(filterText) ||\n                company_name.toLowerCase().includes(filterText) ||\n                phone.toLowerCase().includes(filterText) ||\n                email.toLowerCase().includes(filterText)\n            \n            return matchesFilter\n        });\n    } else {\n        contactsToShow = props.contacts;\n    }\n\n    if (filterText && !contactsToShow.length) {\n        return (\n            <div className=\"contact-list-not-found\">\n                No contacts were found that satisfy your search criteria. Please, try different search.\n            </div>\n        )\n    }\n\n    return (\n        <ul className=\"contact-list\">\n            {\n                contactsToShow.map(\n                    contact => \n                    <li className=\"contact-list-item\" key={contact.email}>\n                        <Contact\n                            name={contact.name}\n                            jobTitle={contact.job}\n                            companyName={contact.company_name}\n                            pictureURL={contact.profile_image}\n                            companyLogoURL={contact.icon}\n                            phoneNumber={contact.phone}\n                            email={contact.email} />\n                    </li>\n                )\n            }\n        </ul>\n    )\n}","import React, { Component } from 'react';\nimport {ContactList} from './components/ContactList/ContactList';\n\nimport './App.scss';\n\nconst CONTACTS_API_URL = 'https://candidate-test.herokuapp.com/contacts';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      contacts: null,\n      filterText: '',\n      networkErrorOccured: false\n    };\n\n    this.onFilterChanged = this.onFilterChanged.bind(this);\n  }\n\n  async componentDidMount() {\n    try {\n      const contacts = await fetch(CONTACTS_API_URL).then(response => response.json())\n      this.setState({contacts});\n    } catch (error) {\n      this.setState({networkErrorOccured: true});\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"app-container\">\n        <header className=\"app-header\">\n          <h1 className=\"page-title\">Contact List</h1>\n          <input \n            type=\"text\" \n            className=\"filter-input\" \n            placeholder=\"search...\" \n            value={this.state.filterText} \n            onChange={this.onFilterChanged} />\n        </header>\n        <div className=\"app-content\">\n          {this.state.contacts && <ContactList contacts={this.state.contacts} filterText={this.state.filterText} />}\n          {!this.state.contacts && !this.state.networkErrorOccured && \n            <div className=\"loader\">Loading contacts...</div>}\n          {this.state.networkErrorOccured && \n            <div className=\"error-message\">Network error has occured. Please, refresh the page to try again.</div>}\n        </div>\n      </div>\n    );\n  }\n\n  onFilterChanged(e) {\n    this.setState({\n      filterText: e.target.value\n    });\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}